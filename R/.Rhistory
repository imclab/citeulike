url = 'http://www.citeulike.org/api/posts/for/doi/')
{
url <- paste(url, doi, sep='')
length(xpathApply(xmlParse(getURL(url)), "//post"))
}
posts(doi = '10.1371/journal.pmed.0020124')
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wordcloud=TRUE)
#' }
tags <-
function(doi, summary = FALSE, wordcloud = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/',
#          url = 'http://www.citeulike.org/json/doi/'
)
{
if(wordcloud==TRUE){summary <- TRUE} else{summary <- FALSE}
url <- paste(url, doi, sep='')
#   fromJSON(url)
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
if(wordcloud == FALSE){outsum} else
{
wordcloud(outsum[,1], outsum[,2])
}
}
}
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wordcloud=TRUE)
#' }
tags <-
function(doi, summary = FALSE, wordcloud = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/',
#          url = 'http://www.citeulike.org/json/doi/'
)
{
if(wordcloud==TRUE){summary <- TRUE} else{summary <- FALSE}
url <- paste(url, doi, sep='')
#   fromJSON(url)
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
if(wordcloud == FALSE){outsum} else
{
wordcloud(outsum[,1], outsum[,2])
}
}
}
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wordcloud=TRUE)
#' }
tags <-
function(doi, summary = FALSE, wordcloud = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/'
#          url = 'http://www.citeulike.org/json/doi/'
)
{
if(wordcloud==TRUE){summary <- TRUE} else{summary <- FALSE}
url <- paste(url, doi, sep='')
#   fromJSON(url)
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
if(wordcloud == FALSE){outsum} else
{
wordcloud(outsum[,1], outsum[,2])
}
}
}
tags(doi = '10.1371/journal.pmed.0020124')
tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
require(wordcloud)
tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
doi = '10.1371/journal.pmed.0020124'
url = 'http://www.citeulike.org/api/posts/for/doi/
url <- paste(url, doi, sep='')
url = 'http://www.citeulike.org/api/posts/for/doi/'
url <- paste(url, doi, sep='')
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
out
outdf <- data.frame(out)
outdf
outsum <- ddply(outdf, .(out), summarise, length(out))
outsum
wc = FALSE
if(wc == FALSE){outsum} else
{
wordcloud(outsum[,1], outsum[,2])
}
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @param summary DOI of the article.
#' @param wc Make wordcloud or not (Defaults to FALSE). Uses the wordcloud package.
#' @param url Base URL for the API call. Don't change.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wordcloud=TRUE)
#' }
tags <-
function(doi, summary = FALSE, wc = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/'
#          url = 'http://www.citeulike.org/json/doi/'
)
{
if(wordcloud==TRUE){summary <- TRUE} else{summary <- FALSE}
url <- paste(url, doi, sep='')
#   fromJSON(url)
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
if(wc == FALSE){outsum} else
{
wordcloud(outsum[,1], outsum[,2])
}
}
}
tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @param summary DOI of the article.
#' @param wc Make wordcloud or not (Defaults to FALSE). Uses the wordcloud package.
#' @param url Base URL for the API call. Don't change.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wordcloud=TRUE)
#' }
tags <-
function(doi, summary = FALSE, wc = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/'
#          url = 'http://www.citeulike.org/json/doi/'
)
{
if(wc==TRUE){summary <- TRUE} else{summary <- FALSE}
url <- paste(url, doi, sep='')
#   fromJSON(url)
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
if(wc == FALSE){outsum} else
{
wordcloud(outsum[,1], outsum[,2])
}
}
}
tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @param summary DOI of the article.
#' @param wc Make wordcloud or not (Defaults to FALSE). Uses the wordcloud package.
#' @param url Base URL for the API call. Don't change.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wordcloud=TRUE)
#' }
tags <-
function(doi, summary = FALSE, wc = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/'
#          url = 'http://www.citeulike.org/json/doi/'
)
{
#   if(wc==TRUE){summary <- TRUE} else{summary <- FALSE}
url <- paste(url, doi, sep='')
#   fromJSON(url)
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
}
if(wc == FALSE){outsum} else
{
wordcloud(outsum[,1], outsum[,2])
}
}
tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @param summary DOI of the article.
#' @param wc Make wordcloud or not (Defaults to FALSE). Uses the wordcloud package.
#' @param url Base URL for the API call. Don't change.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', TRUE, TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wordcloud=TRUE)
#' }
tags <-
function(doi, summary = FALSE, wc = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/'
#          url = 'http://www.citeulike.org/json/doi/'
)
{
#   if(wc==TRUE){summary <- TRUE} else{summary <- FALSE}
url <- paste(url, doi, sep='')
#   fromJSON(url)
tags <- xpathApply(xmlParse(getURL(url)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
}
if(wc == FALSE){outsum} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
wordcloud(outsum[,1], outsum[,2])
}
}
tags(doi = '10.1371/journal.pmed.0020124', TRUE)
tags(doi = '10.1371/journal.pmed.0020124', wc=TRUE)
length(fromJSON('http://www.citeulike.org/json/search/all?q=ecology'))
#' Get CiteUlike tags for a DOI.
#' @import XML RCurl plyr wordcloud
#' @param doi DOI of the article.
#' @param summary Print summary data.frame of tags and counts.
#' @param wc Make wordcloud or not (Defaults to FALSE). Uses the wordcloud package.
#' @param url Base URL for the API call. Don't change.
#' @return Tags on the DOI.
#' @export
#' @examples \dontrun{
#' tags(doi = '10.1371/journal.pmed.0020124')
#' tags(doi = '10.1371/journal.pmed.0020124', summary=TRUE)
#' tags(doi = '10.1371/journal.pmed.0020124', wc=TRUE)
#' }
tags <- function(doi = NA, summary = FALSE, wc = FALSE,
url = 'http://www.citeulike.org/api/posts/for/doi/')
#          url = 'http://www.citeulike.org/json/doi/')
{
url2 <- paste(url, doi, sep='')
message(url2)
tags <- xpathApply(xmlParse(getURL(url2)), "//tag")
out <- sapply(tags, xmlValue)
if(summary == FALSE){out} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
}
if(wc == FALSE){outsum} else
{
outdf <- data.frame(out)
outsum <- ddply(outdf, .(out), summarise, length(out))
wordcloud(outsum[,1], outsum[,2])
}
}
tags(doi = '10.1371/journal.pmed.0020124')
#' Search CiteUlike.
#' @import XML plyr
#' @param user The username to search.
#' @param numrecords Number of records for the user.
#' @param url Base URL for the API call. Don't change.
#' @return Records in CiteULike associated with the username.
#' @export
#' @examples \dontrun{
#' temp <- byuser('cbonfil')
#' temp$numrecords
#' }
byuser <- function(user = NA, numrecords = NA,
url = 'http://www.citeulike.org/json/search/user?q=')
{
url2 <- paste(url, doi, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
out)
}
temp <- byuser('cbonfil')
#' Search CiteUlike.
#' @import XML plyr
#' @param user The username to search.
#' @param numrecords Number of records for the user.
#' @param url Base URL for the API call. Don't change.
#' @return Records in CiteULike associated with the username.
#' @export
#' @examples \dontrun{
#' temp <- byuser('cbonfil')
#' temp$numrecords
#' }
byuser <- function(user = NA, numrecords = NA,
url = 'http://www.citeulike.org/json/search/user?q=')
{
url2 <- paste(url, user, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
out)
}
temp <- byuser('cbonfil')
#' Search CiteUlike.
#' @import XML plyr
#' @param user The username to search.
#' @param numrecords Number of records for the user.
#' @param url Base URL for the API call. Don't change.
#' @return Records in CiteULike associated with the username.
#' @export
#' @examples \dontrun{
#' temp <- byuser('cbonfil')
#' temp$numrecords
#' }
byuser <- function(user = NA, numrecords = NA,
url = 'http://www.citeulike.org/json/user?q=')
{
url2 <- paste(url, user, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
out)
}
temp <- byuser('cbonfil')
temp$numrecords # number of records
temp # actual records
#' Search CiteUlike.
#' @import XML plyr
#' @param user The username to search.
#' @param numrecords Number of records for the user.
#' @param url Base URL for the API call. Don't change.
#' @return Records in CiteULike associated with the username.
#' @export
#' @examples \dontrun{
#' temp <- byuser('cbonfil')
#' temp$numrecords # number of records
#' temp # actual records
#' }
byuser <- function(user = NA, numrecords = NA,
url = 'http://www.citeulike.org/json/user?q=')
{
url2 <- paste(url, user, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
records = out)
}
temp <- byuser('cbonfil')
temp$numrecords # number of records
temp$records[1:3] # some of the actual records
#' Search CiteUlike.
#' @import XML plyr
#' @param query query to give to API call.
#' @param author XXXXXX
#' @param url Base URL for the API call. Don't change.
#' @return Number of records in CiteULike associated with the search, and the
#'  actual records.
#' @export
#' @examples \dontrun{
#' temp <- culsearch('ecology')
#' temp$numrecords # number of records
#' temp$records[1:3] # some of the actual records
#' }
culsearch <- function(query, author = NA,
url = 'http://www.citeulike.org/json/search/all?q=')
{
url2 <- paste(url, doi, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
records = out)
}
#' Search CiteUlike.
#' @import XML plyr
#' @param query query to give to API call.
#' @param url Base URL for the API call. Don't change.
#' @return Number of records in CiteULike associated with the search, and the
#'  actual records.
#' @export
#' @examples \dontrun{
#' temp <- culsearch('ecology')
#' temp$numrecords # number of records
#' temp$records[1:3] # some of the actual records
#' }
culsearch <- function(query = NA,
url = 'http://www.citeulike.org/json/search/all?q=')
{
url2 <- paste(url, doi, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
records = out)
}
#' Search CiteUlike.
#' @import RJSONIO
#' @param query query to give to API call.
#' @param url Base URL for the API call. Don't change.
#' @return Number of records in CiteULike associated with the search, and the
#'  actual records.
#' @export
#' @examples \dontrun{
#' temp <- culsearch('ecology')
#' temp$numrecords # number of records
#' temp$records[1:3] # some of the actual records
#' }
culsearch <- function(query = NA,
url = 'http://www.citeulike.org/json/search/all?q=')
{
url2 <- paste(url, doi, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
records = out)
}
temp <- culsearch('ecology')
temp$numrecords # number of records
#' Search CiteUlike.
#' @import RJSONIO
#' @param query query to give to API call.
#' @param url Base URL for the API call. Don't change.
#' @return Number of records in CiteULike associated with the search, and the
#'  actual records.
#' @export
#' @examples \dontrun{
#' temp <- culsearch('ecology')
#' temp$numrecords # number of records
#' temp$records[1:3] # some of the actual records
#' }
culsearch <- function(query = NA,
url = 'http://www.citeulike.org/json/search/all?q=')
{
url2 <- paste(url, query, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
records = out)
}
#' Search CiteUlike.
#' @import RJSONIO
#' @param query query to give to API call.
#' @param url Base URL for the API call. Don't change.
#' @return Number of records in CiteULike associated with the search, and the
#'  actual records.
#' @export
#' @examples \dontrun{
#' temp <- culsearch('evolution')
#' temp$numrecords # number of records
#' temp$records[1:3] # some of the actual records
#' }
culsearch <- function(query = NA,
url = 'http://www.citeulike.org/json/search/all?q=')
{
url2 <- paste(url, query, sep='')
message(url2)
out <- fromJSON(url2)
list(numrecords = length(out),
records = out)
}
temp <- culsearch('evolution')
temp$numrecords # number of records
temp$records[1:3] # some of the actual records
require(roxygen2)
roxygenize("/Users/ScottMac/github/ropensci/taxize_")
roxygenize("/Users/ScottMac/github/ropensci/citeulike")
roxygenize("/Users/ScottMac/github/ropensci/citeulike")
